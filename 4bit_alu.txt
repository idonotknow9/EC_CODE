`timescale 1ns / 1ps

module ALU_4BIT(
    input [3:0] A,            // 4-bit operand A
    input [3:0] B,            // 4-bit operand B
    input [3:0] S,            // 4-bit control signal
    output reg [3:0] Out      // 4-bit output
);
    always @(*) begin
        case(S)
            4'b0000: Out = A | B;                      // Logical OR
            4'b0001: Out = A & B;                      // Logical AND
            4'b0010: Out = A ^ B;                      // Logical XOR
            4'b0011: Out = ~(A ^ B);                   // Logical XNOR
            4'b0100: Out = ~A;                         // Bitwise NOT A
            4'b0101: Out = (A > B) ? 4'b0001 : 4'b0000; // A > B
            4'b0110: Out = (A < B) ? 4'b0001 : 4'b0000; // A < B
            4'b0111: Out = (A == B) ? 4'b0001 : 4'b0000; // A == B
            4'b1000: Out = A >> 1;                     // Logical right shift A
            4'b1001: Out = A << 1;                     // Logical left shift A
            4'b1010: Out = ~(A & B);                   // NAND
            4'b1011: Out = ~(A | B);                   // NOR
            4'b1100: Out = (A != B) ? 4'b0001 : 4'b0000; // A != B
            4'b1101: Out = ~B;                         // Bitwise NOT B
            4'b1110: Out = A + 1;                      // Increment A
            4'b1111: Out = A - 1;                      // Decrement A
            default: Out = 4'b0000;                    // Default case
        endcase
    end
endmodule


module ALU_4BIT_tb;
    reg [3:0] A;             // 4-bit input A
    reg [3:0] B;             // 4-bit input B
    reg [3:0] S;             // 4-bit control signal
    wire [3:0] Out;          // 4-bit output

    // Instantiate the ALU module
    ALU_4BIT uut (
        .A(A),
        .B(B),
        .S(S),
        .Out(Out)
    );

    initial begin
        // Apply test cases
        A = 4'b1010; B = 4'b0101; S = 4'b0000; #10; // OR operation
        A = 4'b1010; B = 4'b0101; S = 4'b0001; #10; // AND operation
        A = 4'b1010; B = 4'b0101; S = 4'b0010; #10; // XOR operation
        A = 4'b1010; B = 4'b0101; S = 4'b0011; #10; // XNOR operation
        A = 4'b1010; B = 4'b0101; S = 4'b0100; #10; // NOT A
        A = 4'b1010; B = 4'b0101; S = 4'b0101; #10; // A > B
        A = 4'b1010; B = 4'b0101; S = 4'b0110; #10; // A < B
        A = 4'b1010; B = 4'b0101; S = 4'b0111; #10; // A == B
        A = 4'b1010; B = 4'b0101; S = 4'b1000; #10; // Right shift A
        A = 4'b1010; B = 4'b0101; S = 4'b1001; #10; // Left shift A
        A = 4'b1010; B = 4'b0101; S = 4'b1010; #10; // NAND
        A = 4'b1010; B = 4'b0101; S = 4'b1011; #10; // NOR
        A = 4'b1010; B = 4'b0101; S = 4'b1100; #10; // A != B
        A = 4'b1010; B = 4'b0101; S = 4'b1101; #10; // NOT B
        A = 4'b1010; B = 4'b0101; S = 4'b1110; #10; // Increment A
        A = 4'b1010; B = 4'b0101; S = 4'b1111; #10; // Decrement A
        $finish; // End simulation
    end
endmodule
