module SIPO_4bit (
    input clk,               // Clock signal
    input rst,               // Reset signal
    input serial_in,         // Serial input
    output reg [3:0] parallel_out // Parallel output
);
    always @(posedge clk or posedge rst) begin
        if (rst) 
            parallel_out <= 4'b0000; // Reset the output
        else 
            parallel_out <= {parallel_out[2:0], serial_in}; // Shift and store input
    end
endmodule

module tb_SIPO_4bit();
    reg clk, rst, serial_in;       // Test bench inputs
    wire [3:0] parallel_out;       // Test bench output

    // Instantiate the SIPO module
    SIPO_4bit uut (
        .clk(clk),
        .rst(rst),
        .serial_in(serial_in),
        .parallel_out(parallel_out)
    );

    // Generate clock signal
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // Toggle every 5 time units
    end

    // Apply test cases
    initial begin
        rst = 1; serial_in = 0; #10; // Apply reset
        rst = 0;                    // Release reset
        serial_in = 1; #10;         // Input 1
        serial_in = 0; #10;         // Input 0
        serial_in = 1; #10;         // Input 1
        serial_in = 1; #10;         // Input 1
        $finish;                    // End simulation
    end
endmodule
