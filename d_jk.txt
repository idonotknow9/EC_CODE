// D Flip-Flop Implementation
module D_FlipFlop (
    input wire clk,    // Clock input
    input wire rst,    // Reset input
    input wire D,      // Data input
    output reg Q       // Output
);
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            Q <= 1'b0;  // Reset output to 0
        end
        else begin
            Q <= D;     // Set Q to D
        end
    end
endmodule


// D Flip-Flop Testbench
module D_FlipFlop_tb;
    reg clk;    // Clock input
    reg rst;    // Reset input
    reg D;      // Data input
    wire Q;     // Output of flip-flop
    
    D_FlipFlop uut (.clk(clk), .rst(rst), .D(D), .Q(Q));  // Instantiate D Flip-Flop
    
    // Clock generation: Toggle clock every 5 ns
    always begin
        #5 clk = ~clk;
    end
    
    // Test sequence
    initial begin
        clk = 0; rst = 1; D = 0;  
        #10 rst = 0;  // Deassert reset after 10ns
        #10 D = 0;
        #10 D = 1;
        #10 D = 0;
        #10 D = 1;
        #10 rst = 1;  // Assert reset
        #10 rst = 0;  // Deassert reset
        #10 D = 0;
        #10 D = 1;
        #20 $finish;   // End simulation
    end
    
    // Display output at each step
    initial begin
        $monitor("Time = %0t | D = %b, Q = %b, rst = %b", $time, D, Q, rst);
    end
endmodule



// JK Flip-Flop Implementation
module JK_FlipFlop(
    input wire clk,    // Clock input
    input wire rst,    // Reset input
    input wire J,      // J input
    input wire K,      // K input
    output reg Q       // Output
);
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            Q <= 1'b0;   // Reset output to 0
        end
        else begin
            case ({J, K})
                2'b00: Q <= Q;    // No change
                2'b01: Q <= 1'b0; // Reset
                2'b10: Q <= 1'b1; // Set
                2'b11: Q <= ~Q;   // Toggle
            endcase
        end
    end
endmodule


// JK Flip-Flop Testbench
module JK_FlipFlop_tb;
    reg clk;    // Clock input
    reg rst;    // Reset input
    reg J;      // J input
    reg K;      // K input
    wire Q;     // Output of flip-flop
    
    JK_FlipFlop uut (.clk(clk), .rst(rst), .J(J), .K(K), .Q(Q));  // Instantiate JK Flip-Flop
    
    // Clock generation: Toggle clock every 5 ns
    always begin
        #5 clk = ~clk;
    end
    
    // Test sequence
    initial begin
        clk = 0; rst = 1; J = 0; K = 0;
        #10 rst = 0;  // Deassert reset
        #10 J = 0; K = 0;
        #10 J = 0; K = 1;  
        #10 J = 1; K = 0;
        #10 J = 1; K = 1;  
        #10 J = 0; K = 1;
        #10 J = 1; K = 1;
        #10 rst = 1;  // Assert reset
        #10 rst = 0;  // Deassert reset
        #20 $finish;  // End simulation
    end
    
    // Display output at each step
    initial begin
        $monitor("Time = %0t | J = %b, K = %b, Q = %b, rst = %b", $time, J, K, Q, rst);
    end
endmodule
