`timescale 1ns / 1ps

module CLA(a, b, cin, sum, cout);
    input [3:0] a, b;  // 4-bit inputs
    input cin;          // Carry-in input
    output [3:0] sum;   // 4-bit sum output
    output cout;        // Carry-out output

    // Internal wires to hold propagate (p) and generate (g) signals, and carry bits (c1 to c4)
    wire p0, p1, p2, p3, g0, g1, g2, g3, c1, c2, c3, c4;

    // Propagate signals (XOR of a and b at each bit)
    assign p0 = (a[0] ^ b[0]),
           p1 = (a[1] ^ b[1]),
           p2 = (a[2] ^ b[2]),
           p3 = (a[3] ^ b[3]);

    // Generate signals (AND of a and b at each bit)
    assign g0 = (a[0] & b[0]),
           g1 = (a[1] & b[1]),
           g2 = (a[2] & b[2]),
           g3 = (a[3] & b[3]);

    // Carry bits calculation using the CLA logic
    assign c1 = g0 | (p0 & cin),
           c2 = g1 | (p1 & g0) | (p1 & p0 & cin),
           c3 = g2 | (p2 & g1) | (p2 & p1 & g0) | (p2 & p1 & p0 & cin),
           c4 = g3 | (p3 & g2) | (p3 & p2 & g1) | (p3 & p2 & p1 & g0) | (p3 & p2 & p1 & p0 & cin);

    // Sum bit calculation using XOR of propagate signal and carry-in/carry-out
    assign sum[0] = p0 ^ cin,
           sum[1] = p1 ^ c1,
           sum[2] = p2 ^ c2,
           sum[3] = p3 ^ c3;

    // Final carry-out is the carry bit from the most significant bit
    assign cout = c4;
endmodule


module tb_CLA();
    reg [3:0] a;  // 4-bit input a
    reg [3:0] b;  // 4-bit input b
    reg cin;      // Carry-in input
    wire [3:0] sum; // 4-bit sum output
    wire cout;    // Carry-out output

    // Instantiate the CLA module
    CLA uut (
        .a(a),
        .b(b),
        .cin(cin),
        .sum(sum),
        .cout(cout)
    );

    // Initial block to apply test inputs
    initial begin
        // Test 1: a = 0, b = 0, cin = 1
        a = 4'b0000;
        b = 4'b0000;
        cin = 1;
        #10;  // Wait for 10 time units

        // Test 2: a = 5, b = 6, cin = 0
        a = 4'b0101;
        b = 4'b0110;
        cin = 0;
        #10;  // Wait for 10 time units

        // More tests can be added here with different input combinations.
    end
endmodule
