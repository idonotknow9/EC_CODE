// 8:1 Multiplexer Implementation
module mux_8to1(
    input wire [7:0] in,  // 8-bit input data
    input wire [2:0] sel, // 3-bit select signal
    output wire y         // Output selected value
);
    assign y = (sel == 3'b000) ? in[0] :
               (sel == 3'b001) ? in[1] :
               (sel == 3'b010) ? in[2] :
               (sel == 3'b011) ? in[3] :
               (sel == 3'b100) ? in[4] :
               (sel == 3'b101) ? in[5] :
               (sel == 3'b110) ? in[6] :
               in[7];  // Default case when sel = 3'b111
endmodule


// Multiplexer Testbench
module stimulus();
    reg [7:0] in;       // 8-bit input data
    reg [2:0] sel;      // 3-bit select signal
    wire y;             // Output
    
    mux_8to1 uut(in, sel, y);  // Instantiate multiplexer
    
    initial begin
        in = 8'b10101011;   // Set input data
        sel = 3'b000;       // Test select line with value 000
        #10 sel = 3'b001;   // Test select line with value 001
        #10 sel = 3'b010;   // Test select line with value 010
        #10 sel = 3'b011;   // Test select line with value 011
        #10 sel = 3'b100;   // Test select line with value 100
        #10 sel = 3'b101;   // Test select line with value 101
        #10 sel = 3'b110;   // Test select line with value 110
        #10 sel = 3'b111;   // Test select line with value 111
        #10 $finish;        // End simulation
    end
endmodule


// 1:8 Demultiplexer Implementation
module demux_1to8(
    input in,             // Single input data
    input [2:0] sel,      // 3-bit select signal
    output [7:0] y        // 8 output lines
);
    assign y[0] = (sel == 3'b000) ? in : 1'b0;
    assign y[1] = (sel == 3'b001) ? in : 1'b0;
    assign y[2] = (sel == 3'b010) ? in : 1'b0;
    assign y[3] = (sel == 3'b011) ? in : 1'b0;
    assign y[4] = (sel == 3'b100) ? in : 1'b0;
    assign y[5] = (sel == 3'b101) ? in : 1'b0;
    assign y[6] = (sel == 3'b110) ? in : 1'b0;
    assign y[7] = (sel == 3'b111) ? in : 1'b0;
endmodule


// Demultiplexer Testbench
module stimulus2();
    reg in;             // Single input data
    reg [2:0] sel;      // 3-bit select signal
    wire [7:0] y;       // 8 output lines
    
    demux_1to8 uut(in, sel, y);  // Instantiate demultiplexer
    
    initial begin
        in = 1;  // Start with input 1
        
        // Test each select line (sel) with input 1
        sel = 3'b000; #10;  // dout[0] should be 1, others 0
        sel = 3'b001; #10;  // dout[1] should be 1, others 0
        sel = 3'b010; #10;  // dout[2] should be 1, others 0
        sel = 3'b011; #10;  // dout[3] should be 1, others 0
        sel = 3'b100; #10;  // dout[4] should be 1, others 0
        sel = 3'b101; #10;  // dout[5] should be 1, others 0
        sel = 3'b110; #10;  // dout[6] should be 1, others 0
        sel = 3'b111; #10;  // dout[7] should be 1, others 0
        
        in = 0;  // Change input to 0
        // Test each select line (sel) with input 0
        sel = 3'b000; #10;  // dout[0] should be 0
        sel = 3'b001; #10;  // dout[1] should be 0
        sel = 3'b010; #10;  // dout[2] should be 0
        sel = 3'b011; #10;  // dout[3] should be 0
        sel = 3'b100; #10;  // dout[4] should be 0
        sel = 3'b101; #10;  // dout[5] should be 0
        sel = 3'b110; #10;  // dout[6] should be 0
        sel = 3'b111; #10;  // dout[7] should be 0
        
        #10 $finish;   // End simulation
    end
endmodule
