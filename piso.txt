module PISO_4bit (
    input clk,                // Clock signal
    input rst,                // Reset signal
    input load,               // Load control signal
    input [3:0] parallel_in,  // Parallel input data
    output reg serial_out     // Serial output
);
    reg [3:0] shift_reg;      // Internal shift register

    always @(posedge clk or posedge rst) begin
        if (rst)
            shift_reg <= 4'b0000;                    // Reset register to 0
        else if (load)
            shift_reg <= parallel_in;               // Load parallel data
        else
            shift_reg <= {1'b0, shift_reg[3:1]};    // Shift right
        serial_out <= shift_reg[0];                 // Output LSB
    end
endmodule

module tb_PISO_4bit();
    reg clk, rst, load;            // Test bench inputs
    reg [3:0] parallel_in;         // Parallel input
    wire serial_out;               // Serial output

    // Instantiate the PISO module
    PISO_4bit uut (
        .clk(clk),
        .rst(rst),
        .load(load),
        .parallel_in(parallel_in),
        .serial_out(serial_out)
    );

    // Generate clock signal
    initial begin
        clk = 0;
        forever #5 clk = ~clk;     // Toggle every 5 time units
    end

    // Apply test cases
    initial begin
        rst = 1; load = 0; parallel_in = 4'b0000; #10; // Apply reset
        rst = 0; load = 1; parallel_in = 4'b1011; #10; // Load parallel data
        load = 0; #50;                                // Shift serially
        $finish;                                      // End simulation
    end
endmodule
